from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import CommandStart
from functions import parse
from keyboards import reply
from .state import Form
from functions import parse
from aiogram import Router
import asyncio
from functions.parse import stop_parser


router = Router()

@router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {message.from_user.first_name} !', reply_markup=reply.search_kb)

@router.message(F.text == 'üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
async def start_search(message: Message, state: FSMContext):
    await state.set_state(Form.city)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ (–≥–æ—Ä–æ–¥-—Ä–∞–π–æ–Ω):', reply_markup=reply.cancel_kb)

@router.message((F.text == '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å') | (F.text == '–û—Ç–º–µ–Ω–∏—Ç—å'))
async def cancel_process(message:Message,state:FSMContext):
    with open('count.txt', 'w') as file:
        file.write("0")
    stop_parser()
    await state.clear()
    await message.answer('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É',reply_markup=reply.search_kb)

@router.message(Form.city)
async def add_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.replace(' ', '-').lower())
    await state.set_state(Form.type_ads)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø(–∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–¥–∞–∂–∞):', reply_markup=reply.type_kb)


@router.message(Form.type_ads)
async def add_type(message: Message, state: FSMContext):
    if message.text == '–ê—Ä–µ–Ω–¥–∞':
        await state.update_data(type_ads='izdavanje')
    elif message.text == '–ü—Ä–æ–¥–∞–∂–∞':
        await state.update_data(type_ads='prodaja')
    await state.set_state(Form.type_housing)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', reply_markup=reply.type_housing_kb)

@router.message(Form.type_housing)
async def add_type_housing(message: Message, state: FSMContext):
    if message.text == '–ö–≤–∞—Ä—Ç–∏—Ä–∞':
        await state.update_data(type_housing='stanova')
    elif message.text == '–ö–æ–º–Ω–∞—Ç–∞':
        await state.update_data(type_housing='soba')
    elif message.text == '–î–æ–º':
        await state.update_data(type_housing='kuca')
    elif message.text == '–ì–∞—Ä–∞–∂':
        await state.update_data(type_housing='garaza')
    elif message.text == '–ó–µ–º–ª—è':
        await state.update_data(type_housing='zemljista')
    elif message.text == '–ú–µ—Å—Ç–Ω—ã–π':
        await state.update_data(type_housing='lokala')
    elif message.text == '–û—Ñ–∏—Å/–ö–æ–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ':
        await state.update_data(type_housing='kancelarijskog-prostora')
    elif message.text == '–ë–∏–∑–Ω–µ—Å-–ó–¥–∞–Ω–∏–µ':
        await state.update_data(type_housing='poslovnih-zgrada')
    elif message.text == '–ó–∞–ª':
        await state.update_data(type_housing='hala')
    elif message.text == '–°–∫–ª–∞–¥':
        await state.update_data(type_housing='magacina')
    elif message.text == '–û–±—ä–µ–∫—Ç –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏–µ':
        await state.update_data(type_housing='ugostiteljskih-objekata')
    elif message.text == '–ö–∏–æ—Å–∫':
        await state.update_data(type_housing='kioska')
    elif message.text == '–°–∫–ª–∞–¥':
        await state.update_data(type_housing='stovarista')
    await state.set_state(Form.price_from)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –æ—Ç:', reply_markup=reply.cancel_kb)

@router.message(Form.price_from)
async def add_price_from(message: Message, state: FSMContext):
    await state.update_data(price_from=message.text)
    await state.set_state(Form.price_to)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–æ:', reply_markup=reply.cancel_kb)

@router.message(Form.price_to)
async def add_price_to(message: Message, state: FSMContext):
    await state.update_data(price_to=message.text)
    data = await state.get_data() 
    chat_id = message.chat.id
    asyncio.create_task(parse.parser(chat_id=chat_id, **data))   

   

